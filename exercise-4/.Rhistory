# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library(dplyr)
library(nycflight13)
library("nycflight13")
library(nycflights13)
install.packages("nycflights13")
library(nycflights13)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(nycflights13)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(flights)
nrow(flights)
ncol(flights)
colnames(flights)
??flights
??flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights %>%
mutate(delay = arr_delay - dep_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights %>%
mutate(delay = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
sorted_by_delay <- flights %>%
sort(delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
sorted_by_delay <- flights %>%
sort(delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
sorted_by_delay <- flights %>%
arrange(delay)
flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
new_flights <- flights %>%
mutate(delay = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
sorted_by_delay <- new_flights %>%
arrange(delay)
flights
new_flights
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
sorted_by_delay <- new_flights %>%
arrange(delay)
new_flights
dim(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
new_flights <- flights %>%
mutate(time_gained = arr_delay - dep_delay)
View(new_flights)
# Make a histogram of the amount of time gained using the `hist()` function
hist(time_gained)
# Make a histogram of the amount of time gained using the `hist()` function
hist(new_flights$time_gained)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
sorted_by_delay <- new_flights %>%
arrange(time_gained)
new_flights
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
sorted_by_delay <- new_flights %>%
arrange(time_gained)
new_flights
View(new_flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
sorted_by_delay <- new_flights %>%
arrange(time_gained)
new_flights
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
new_flights <- new_flights %>%
arrange(time_gained)
new_flights
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(new_flights$time_gained, na.rm = T)
summarize(new_flights, mean = mean(time_gained, na.rm = T))
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
jfk_sea <- flights %>%
fliter(origin == "JFK", dest == "SEA") %>%
select(origin, dest, time_gained)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
jfk_sea <- flights %>%
fliter(origin == "JFK", dest == "SEA") %>%
select(origin, dest, time_gained)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
jfk_sea <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
select(origin, dest, time_gained)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
jfk_sea <- new_flights %>%
filter(origin == "JFK", dest == "SEA") %>%
select(origin, dest, time_gained)
jfk_sea
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
summary <- new_flights %>%
filter(origin == "JFK", dest == "SEA") %>%
summarise(
avg_time = mean(time_gained, na.rm = T),
min_time = min(time_gained, na.rm = T),
max_time = max(time_gained, na.rm = T)
)
summary
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
flights <- flights %>%
group_by(month) %>%
mutate(dep_delay_by_month, mean(dep_delay, na.rm = T))
flights <- flights %>%
group_by(month) %>%
mutate(dep_delay_by_month = mean(dep_delay, na.rm = T))
View(flights)
flights <- flights %>%
group_by(month) %>%
filter(month) %>%
mutate(dep_delay_by_month = mean(dep_delay, na.rm = T))
flights <- flights %>%
group_by(month)
View(flights)
View(flights(1))
flights(1)
flights <- flights %>%
group_by(month)
flights
flights <- flights %>%
group_by(month) %>%
summarise(dep_delay_by_month = mean(dep_delay, na.rm = T))
flights
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
flights
# Which month had the greatest average departure delay?
flights[flights$dep_delay_by_month == max(flights$dep_delay_by_month), "month"]
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create
# a scatterplot by passing that data frame to the 'plot()' function
plot(flights)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
flights
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
flights
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
flights
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarise(delay = mean(dep_delay, na.rm = T))
View(dep_delay_by_month)
# Which month had the greatest average departure delay?
dep_delay_by_month[dep_delay_by_month$dep_delay_by_month == max(dep_delay_by_month$dep_delay_by_month), "month"]
# Which month had the greatest average departure delay?
dep_delay_by_month[dep_delay_by_month$delay == max(dep_delay_by_month$delay), "month"]
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create
# a scatterplot by passing that data frame to the 'plot()' function
plot(dep_delay_by_month)
